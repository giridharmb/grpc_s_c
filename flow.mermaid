sequenceDiagram
    participant C as Client (VM)
    participant S as gRPC Server
    participant DB as PostgreSQL
    participant R as Redis
    participant E as External Data Source

    Note over C,S: Client startup: connect and send initial ping
    C->>S: SendPing(ip, JSON payload)
    activate S
    S->>DB: Upsert client record\n(update lastSeen/create new record)
    DB-->>S: (acknowledge)
    S->>R: SET key "active:<ip>"\nTTL = 5s
    S->>DB: Query pending messages for <ip>
    alt Pending messages exist
        DB-->>S: Return pending messages
        S->>R: Publish each message on channel\n"client:<ip>:messages"
        Note over S: Mark messages as delivered in DB
    else No pending messages
        DB-->>S: No messages
    end
    S-->>C: PingResponse ("pong", extra JSON)
    deactivate S

    Note over C: Client opens streaming RPC
    C->>S: ListenForMessages(ip)
    activate S
    S->>R: Subscribe to channel "client:<ip>:messages"
    R-->>S: Begin streaming messages
    S-->>C: Push messages via streaming RPC
    deactivate S

    Note over E,S: External event arrives
    E->>S: External Message (JSON payload with target ip)
    activate S
    S->>R: EXISTS key "active:<ip>"
    alt Client Active (key exists)
        R-->>S: Key exists
        S->>R: Publish external message\non "client:<ip>:messages"
        S-->>E: (Acknowledged: Delivered)
    else Client Inactive
        R-->>S: Key missing
        S->>DB: Store external message as pending
        S-->>E: (Acknowledged: Stored)
    end
    deactivate S

    Note over S: Background Tasks: Clean stale clients & remove old pending messages